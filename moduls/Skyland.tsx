/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: madexc (https://sketchfab.com/madexc)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/medium-skyland-4e322696d4a94542936d79ab3b1b23e7
Title: medium-skyland
*/
"use client";
import React, { useRef, useEffect } from "react";
import { useFrame, useThree } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { a } from "@react-spring/three";

export default function Model({ isRotating, setIsrotating, ...props }) {
  const mediumskylandRef = useRef();
  const { nodes, materials } = useGLTF("/assets/3D/medium-skyland.glb");

  const { gl, viewPort } = useThree();

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopProgation();
    e.preventDefault();
    setIsrotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  };
  const handlePointerUp = (e) => {
    e.stopProgation();
    e.preventDefault();
    setIsrotating(false);
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    const delta = (clientX - lastX.current) / viewPort.width;

    mediumskylandRef.current.rotation.y += delta * 0.01 * Math.PI;

    lastX.current = clientX;
    rotationSpeed.current = delta * 0.01 * Math.PI;
  };
  const handlePointerMove = (e) => {
    e.stopProgation();
    e.preventDefault();

    if (isRotating) {
      handlePointerUp(e);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setIsrotating(true);
      mediumskylandRef.current.rotation.y += 0.01 * Math.PI;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setIsrotating(true);
      mediumskylandRef.current.rotation.y -= 0.01 * Math.PI;
    }
  };

  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setIsrotating(false);
    }
  };

  useEffect(() => {
    document.addEventListener("pointerdown", handlePointerDown);
    document.addEventListener("pointerup", handlePointerUp);
    document.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      document.removeEventListener("pointerdown", handlePointerDown);
      document.removeEventListener("pointerup", handlePointerUp);
      document.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);
  return (
    <a.group ref={mediumskylandRef} {...props}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Object_2.geometry}
          material={materials.Brown_Mushroom}
        />
        <mesh
          geometry={nodes.Object_3.geometry}
          material={materials.Coal_Ore}
        />
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials.Dandelion}
        />
        <mesh geometry={nodes.Object_5.geometry} material={materials.Dirt} />
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials.Glowstone}
        />
        <mesh geometry={nodes.Object_7.geometry} material={materials.Grass} />
        <mesh
          geometry={nodes.Object_8.geometry}
          material={materials.Grass_Block}
        />
        <mesh geometry={nodes.Object_9.geometry} material={materials.Gravel} />
        <mesh
          geometry={nodes.Object_10.geometry}
          material={materials.Oak_Leaves}
        />
        <mesh
          geometry={nodes.Object_11.geometry}
          material={materials.Oak_Log}
        />
        <mesh
          geometry={nodes.Object_12.geometry}
          material={materials.Obsidian}
        />
        <mesh geometry={nodes.Object_13.geometry} material={materials.Poppy} />
        <mesh
          geometry={nodes.Object_14.geometry}
          material={materials.Red_Mushroom}
        />
        <mesh
          geometry={nodes.Object_15.geometry}
          material={materials.Stationary_Water}
        />
        <mesh geometry={nodes.Object_16.geometry} material={materials.Stone} />
        <mesh geometry={nodes.Object_17.geometry} material={materials.Vines} />
      </group>
    </a.group>
  );
}
